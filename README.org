* simpleâ€‹_cache
  :PROPERTIES:
  :padline:  no
  :END:
The distributed, [[https://github.com/erlware/Erlang-and-OTP-in-Action-Source/tree/master/chapter_09/resource_discovery][resource-aware]] cache application from [[https://github.com/erlware/Erlang-and-OTP-in-Action-Source/tree/master/chapter_09/simple_cache][Chapter 9]] of
[[http://www.manning.com/logan/][Erlang and OTP in Action]], ported to [[https://github.com/rvirding/lfe][LFE]].

#+BEGIN_SRC erlang :tangle simple_cache.rel
{release,
 {"simple_cache", "0.1.0"},
 {erts,           "7.1"},
 [{kernel,             "4.1"},
  {stdlib,             "2.6"},
  {sasl,               "2.6"},
  {mnesia,             "4.13.1"},
  {resource_discovery, "0.1.0"},
  {simple_cache,       "0.3.0"}]}.
#+END_SRC

#+BEGIN_SRC erlang :tangle sys.config
[{sasl,
  [{sasl_error_logger, {file, "/tmp/simple_cache.sasl_log"}}]},
 {simple_cache,
  [{contact_nodes, ['contact1@localhost', 'contact2@localhost']}]}].
#+END_SRC

#+BEGIN_SRC erlang :tangle resource_discovery/src/resource_discovery.app.src
%% -*- erlang -*-
{application, resource_discovery,
 [{description,  "A simple resource discovery system"},
  {vsn,          "0.1.0"},
  {modules,      ['resource-discovery', 'rd-sup', 'rd-app', 'rd-server']},
  {registered,   ['rd-sup', 'rd-server']},
  {applications, [kernel, stdlib]},
  {mod,          {'rd-app', []}}]}.
#+END_SRC

#+BEGIN_SRC erlang simple_cache/src/simple_cache.app.src
%% -*- erlang -*-
{application,    simple_cache,
 [{description,  "A simple caching system"},
  {vsn,          "0.3.0"},
  {modules,      ['simple-cache',
                  'sc-sup',
                  'sc-app',
                  'sc-element-sup', 'sc-element',
                  'sc-store',
                  'sc-event', 'sc-event-logger']},
  {registered,   ['sc-sup', 'sc-element-sup', 'sc-event']},
  {applications, [kernel, sasl, stdlib, mnesia, resource_discovery]},
  {mod,          {'sc-app', []}}]}.
#+END_SRC

** Introduction
This OTP application provides a key/value store and is based on
the [[https://github.com/yurrriq/simple_cache/tree/chapter_06][chapter_06]] version, but features an added =gen_event=-based logging system.

** Installation
Just add it to your =rebar.config= deps:

#+BEGIN_SRC erlang
  {deps, [
    ...
    {simple_cache, ".*",
      {git, "git@github.com:yurrriq/simple_cache.git", "chapter_10"}}
      ]}.
#+END_SRC

And then do the usual:

#+BEGIN_SRC bash
$ rebar get-deps compile
#+END_SRC

** Usage
*** Setting up contact nodes
T.his version now requires contact nodes to set up clustering.
The simplest way is to start to contact nodes locally.

In one shell:
#+BEGIN_SRC bash
$ lfe -sname contact1@localhost
#+END_SRC
.. and in another:
#+BEGIN_SRC bash
$ lfe -sname contact2@localhost
#+END_SRC

... or, for convenience:
#+BEGIN_SRC bash
$ make contact-nodes
#+END_SRC

*** Starting the application
Start the app from your terminal:
#+BEGIN_SRC bash
$ lfe -sname mynode@localhost \
      -pa    ./simple_cache/ebin \
      -pa    ./resource_discovery/ebin \
      -boot  ./simple_cache \
      config sys
#+END_SRC

To stop the event logger, call ~sc-event-logger:delete-handler/0~.
#+BEGIN_SRC lfe
> (sc-event-logger:delete-handler)
ok
#+END_SRC

*** Example variables
For convenience and brevity, we set an example ~key~ and an arbitrarily complex
~value~ in the REPL.
#+BEGIN_SRC lfe
> (set key 'example)
example
> (set val '#(example #(string "This is an example") #(number 333)))
#(example #(string "This is an example") #(number 333))
#+END_SRC

*** Storing a key/value pair
To store a key/value pair in the cache, simply call
~simple-cache:insert/2~. When successful, it returns the atom, ~true~.
#+BEGIN_SRC lfe
> (simple-cache:insert key val)
true
#+END_SRC

Otherwise, you'll get an error, most notably when the application isn't started.

*** Looking up a value by key
To look up the value associated with a key, call ~lookup/1~:
#+BEGIN_SRC lfe
> (simple-cache:lookup key)
#(ok #(example #(string "This is an example") #(number 333)))
#+END_SRC

When the key is not found, you'll get the tuple, ~#(error not-found)~.
#+BEGIN_SRC lfe
> (simple-cache:lookup 'bad-key)
#(error not-found)
#+END_SRC

**** Note
~simple-cache:lookup/1~ will also return ~#(error not-found)~ when the
application isn't running.
#+BEGIN_SRC lfe
> (application:stop 'simple_cache)

=INFO REPORT==== 18-Aug-2015::00:09:28 ===
    application: simple_cache
    exited: stopped
    type: temporary
ok
> (simple-cache:lookup key)
#(error not-found)
#+END_SRC

*** Deleting a key/value pair
~delete/1~ returns the atom, =ok=, even if the given key isn't stored.
#+BEGIN_SRC lfe
> (simple-cache:delete key)
ok
> (simple-cache:delete 'any-key)
ok
#+END_SRC

If you call ~lookup/1~ with a deleted key, you'll get the tuple,
~#(error not-found)~.
#+BEGIN_SRC lfe
> (simple-cache:lookup key)
#(error not-found)
#+END_SRC

*** Default timeout
In this version, only the default timeout is used, though a quick code change
would allow it to be specified manually. The default timeout is =(* 60 60 24)=
or 86400 seconds or one day. After that long, the key/value pair will be deleted
from the cache.
#+BEGIN_SRC lfe
> (simple-cache:insert 'timeout "one day")
true
> (simple-cache:lookup 'timeout)
#(ok "one day")
#+END_SRC

Wait a day...
#+BEGIN_SRC lfe
> (simple-cache:lookup 'timeout)
#(error not-found)
#+END_SRC
** Scripts
#+BEGIN_SRC sh :exports none :tangle bin/install.sh
#!/bin/sh
# rename this file to "install" and set the executable flag,
# then copy it into the bin directory of your release package
# (update the erts version number below to match your release)
ROOT=`pwd`
DIR=./erts-7.1/bin
sed s:%FINAL_ROOTDIR%:$ROOT: $DIR/erl.src > $DIR/erl
#+END_SRC
#+BEGIN_SRC sh :exports none :tangle bin/simple_cache.sh
#!/bin/sh
# rename this file to "simple_cache" and set the executable flag,
# then copy it into the bin directory of your release package
# (update the erts version number below to match your release)
./erts-7.1/bin/erl \
    -sname cache \
    -boot ./releases/0.1.0/start \
    -config ./releases/0.1.0/sys \
    -detached
#+END_SRC
